@page "/"

<h3>University-Students</h3>


@inject DataAccess.Contracts.IStudentService studentService
@using DataAccess.Models
@inject MudBlazor.ISnackbar snackBar


<MudPaper Square="true" Class="d-flex justify-space-around">
    <!-- students -->
    <MudTable Items="@GetStudents()"
              @onclick="@( (x) => ClickEvent(selectedItems1.FirstOrDefault()))"
              Height="350px"
              Breakpoint="Breakpoint.Sm"
              MultiSelection="true"
              @bind-SelectedItems="selectedItems1"
              Hover="@hover">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>Phone</MudTh>
            <MudTh>Email</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="StudentId">@context.StudentId</MudTd>
            <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
            <MudTd DataLabel="LastName">@context.LastName</MudTd>
            <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 50, 100 }" />
        </PagerContent>
    </MudTable>

    <MudDivider Vertical="true" FlexItem="true" />

    <MudCard>
        <MudCardContent>
            <MudText>Story of the day</MudText>
            <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
        </MudCardActions>
    </MudCard>

</MudPaper>

<!-- transactions for selected student-->
<MudGrid>
    <MudItem xs="12">
        @if (transactions!=null && transactions.Count()>0)
        {
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                <MudTable Items="@transactions"
                      Height="350px"
                      Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Tr #</MudTh>
                    <MudTh>Student #</MudTh>
                    <MudTh>GL ACCT NO</MudTh>
                    <MudTh>Credit</MudTh>
                    <MudTh>Debit</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="TransactionId">@context.TransactionId</MudTd>
                    <MudTd DataLabel="StudentId">@context.StudentId</MudTd>
                    <MudTd DataLabel="GLACCTNO">@context.GLACCTNO</MudTd>
                    <MudTd DataLabel="CreditAmount">@context.CreditAmount</MudTd>
                    <MudTd DataLabel="DebitAmount">@context.DebitAmount</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 50, 100 }" />
                </PagerContent>
            </MudTable>
            </MudPaper>
        }
        else{
            <MudPaper>
                <MudCard>
                    <MudCardContent>
                        <MudText>Student-Transactions Data Not Available!</MudText>                       
                    </MudCardContent>                 
                </MudCard>
            </MudPaper>
        }
    </MudItem>   
</MudGrid>


@code{

    private bool hover = true;
    private HashSet<Student> selectedItems1 = new HashSet<Student>();


    private Student student = new Student();
    private List<Student> students = new List<Student>();
    public List<Transaction> transactions = new List<Transaction>();


    protected override async Task OnInitializedAsync()
    {
        GetStudents();
    }
    private List<Student> GetStudents()
    {
        students = studentService.GetStudents();

        return students;
    }
    private Student GetStudent(int id)
    {
        student = studentService.GetStudent(id);

        return student;
    }
    private string HandleNull(string value)
    {
        if (value == null || value == "")
            return "N/A";
        else
            return value;
    }


    private void ClickEvent(Student model)
    {
        transactions = new List<Transaction>();
        GetStudentTransactions();
    }
    private List<Transaction> GetStudentTransactions()
    {
        if (selectedItems1.FirstOrDefault() != null)
        {
            transactions = studentService.GetStudentTransactions(selectedItems1.FirstOrDefault().StudentId);


            return transactions;
        }
        else
        {
            return new List<Transaction>();
        }
    }
}




