@page "/gl_acct_data"

<style>
    .filterBtn {
        font-size: medium;
        padding: 30px;
        margin:5px;
    }

    .glpsDataTable {
        margin: 30px;
    }
    .noData {
        color: red;
        font-size: x-large;
        font-weight: bold;
    }
</style>

@inject DataAccess.Contracts.IGLPostingService glPostingService
@using DataAccess.Models
@using DataAccess.DTO
@inject MudBlazor.ISnackbar snackBar

<h3>From SIS to NAV</h3>

<!-- filter -->
<div class="container">
    <MudGrid>
        <MudItem xs="3">
            <MudSelect @bind-Value="sourceValue"
                       Variant="Variant.Outlined"
                       HelperText="Select Source"
                       AdornmentColor="Color.Secondary">
                @foreach (SourceEnum item in Enum.GetValues(typeof(SourceEnum)))
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="3">
            <MudDatePicker Label="From TR Date"
                           @bind-Date="fromTRDate" />
        </MudItem>
        <MudItem xs="3">
            <MudDatePicker Label="To TR Date"
                           @bind-Date="toTRDate" />
        </MudItem>
        <MudItem xs="3">
            <MudButton @onclick="@( (x) => DoFilter(sourceValue.ToString()))"
                       Class="filterBtn"
                       Variant="Variant.Filled"
                       Color="Color.Primary">
                <span class="oi oi-magnifying-glass" aria-hidden="true">
                    Filter
                </span>
            </MudButton>
        </MudItem>
    </MudGrid>
    <p></p>
</div>


<h5>GL_Postings:</h5>
<p></p>
<MudPaper Square="true" Class="d-flex justify-space-around">
    <!-- GL_Postings -->
    <MudTable Items="@gl_postings"
              @ref="table"
              @onclick="@( (x) => ClickEvent(selectedGL_Postings.LastOrDefault()))"
              Height="350px"
              Breakpoint="Breakpoint.Sm"
              MultiSelection="true"
              @bind-SelectedItems="selectedGL_Postings"
              @bind-SelectedItem="selectedGL_Posting"
              Hover="@hover">
        <HeaderContent>
            <MudTh>POSTINGS ID</MudTh>
            <MudTh>SOURCE</MudTh>
            <MudTh>REF NO</MudTh>
            <MudTh>TR DATE</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="StudentId">@context.PostingsId</MudTd>
            <MudTd DataLabel="FirstName">@context.Source</MudTd>
            <MudTd DataLabel="LastName">@context.RefNo</MudTd>
            <MudTd DataLabel="PhoneNumber">@context.TRDate.ToString("dd MMM yyyy")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 2,5,10 }" />
        </PagerContent>
    </MudTable>

    <MudDivider Vertical="true" FlexItem="true" />

    <MudCard>
        <!-- transaction-summary for all selected-gl-postings -->
        @if (transactionSummary != null && transactionSummary.Count() > 0)
        {
            <MudTable Items="@transactionSummary"
                      Height="350px"
                      Breakpoint="Breakpoint.Sm"
                      Hover="@hover">
                <HeaderContent>
                    <MudTh>GL_ACCOUNT_NO</MudTh>
                    <MudTh>ENTRY_AMOUNT</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="GLACCTNO">@context.GLACCTNO</MudTd>
                    <MudTd DataLabel="EntryAmount">@context.EntryAmount</MudTd>
                </RowTemplate>
            </MudTable>
            <p></p>
            <MudGrid>
                <MudItem xs="6">
                    <MudChip Label="true"
                             Size="Size.Large"
                             Color="Color.Success">
                        @TotalCreditAmount
                    </MudChip>
                </MudItem>
                <MudItem xs="6">
                    <MudChip Label="true"
                             Size="Size.Large"
                             Color="Color.Warning">
                        (@TotalDebitAmount)
                    </MudChip>
                </MudItem>
            </MudGrid>
            <p></p>
            <MudGrid>
                <MudItem xs="6">
                    <MudButton 
                               Class="filterBtn"
                               Variant="Variant.Filled"
                               Color="Color.Success">
                        <span class="oi oi-transfer" aria-hidden="true">
                            Excel
                        </span>
                    </MudButton>                  
                </MudItem>
                <MudItem xs="6">
                    <MudButton Class="filterBtn"
                               Variant="Variant.Filled"
                               Color="Color.Tertiary">
                        <span class="oi oi-data-transfer-upload" aria-hidden="true">
                            NAV
                        </span>
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudPaper>
                <MudCard>
                    <MudCardContent>
                        <MudText>
                            <span class="noData">
                                Transaction Summary Data Not Available!
                            </span>
                        </MudText>                        
                    </MudCardContent>
                </MudCard>
            </MudPaper>
        }
    </MudCard>

</MudPaper>

<!-- glps_datas for selected gl_posting-->
<p></p>
<h5>GLPS_Data:</h5>
<p></p>
<div class="container glpsDataTable">
    <MudGrid>
        <MudItem xs="9">
            @if (glps_datas != null && glps_datas.Count() > 0)
            {
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                    <MudTable Items="@glps_datas"
                              Height="350px"
                              Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>#</MudTh>
                            <MudTh>POSTINGS ID</MudTh>
                            <MudTh>POS</MudTh>
                            <MudTh>GL ACCT NO</MudTh>
                            <MudTh>DEBIT</MudTh>
                            <MudTh>CREDIT</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="GLPS_DataId">@context.GLPS_DataId</MudTd>
                            <MudTd DataLabel="PostingsId">@context.PostingsId</MudTd>
                            <MudTd DataLabel="POS">@context.POS</MudTd>
                            <MudTd DataLabel="GLACCTNO">@context.GLACCTNO</MudTd>
                            <MudTd DataLabel="Debit">@context.Debit</MudTd>
                            <MudTd DataLabel="Credit">@context.Credit</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5,10 }" />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            }
            else
            {
                <MudPaper>
                    <MudCard>
                        <MudCardContent>
                            <MudText>
                                <span class="noData">
                                    GLPS_Datas Not Available!
                                </span>                            
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudPaper>
            }
        </MudItem>
        <MudItem xs="3">
        </MudItem>
    </MudGrid>
</div>




@code{

    // very first load of table for gl_postings,,, displays number of rows
    // in table
    // @ref="table" code in table configuration
    private MudTable<GL_Posting> table;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }


    private bool hover = true;
    private HashSet<GL_Posting> selectedGL_Postings = new HashSet<GL_Posting>();
    private GL_Posting selectedGL_Posting = new GL_Posting();
    private HashSet<int> selectedIds = new HashSet<int>();

    private GL_Posting gl_posting = new GL_Posting();
    private List<GL_Posting> gl_postings = new List<GL_Posting>();
    public List<GLPS_Data> glps_datas = new List<GLPS_Data>();
    List<TransactionSummary> transactionSummary = new List<TransactionSummary>();
    private decimal? TotalCreditAmount;
    private decimal? TotalDebitAmount;

    protected override async Task OnInitializedAsync()
    {
        GetAllGLPostings();
    }
    private List<GL_Posting> GetAllGLPostings()
    {
        gl_postings = glPostingService.GetAllGL_Postings();

        return gl_postings;
    }
    private GL_Posting GetGL_Posting(int id)
    {
        gl_posting = glPostingService.GetGL_Posting(id);

        return gl_posting;
    }


    private void ClickEvent(GL_Posting model)
    {
        // transaction-summary for all selected-gl-postings
        selectedIds = new HashSet<int>();
        foreach (var p in selectedGL_Postings)
        {
            selectedIds.Add(p.PostingsId);
        }
        List<int> selectedIdsOfList = selectedIds.ToList();
        transactionSummary = glPostingService.GetTransactionsSummary(selectedIdsOfList);
        foreach (var ts in transactionSummary)
        {
            if (ts.TotalCreditAmount == null)
                TotalDebitAmount = ts.TotalDebitAmount;
            else
                TotalCreditAmount = ts.TotalCreditAmount;
        }


        var flag = false;
        foreach (var pid in selectedIdsOfList)
        {
            if (pid == selectedGL_Posting.PostingsId)
            {
                flag = true;
                break;
            }
            else
            {
                flag = false;
            }
        }
        if (flag)
        {
            GetGLPS_Datas(selectedGL_Posting);
        }
        else
        {
            GetGLPS_Datas(model);
        }
    }
    private List<GLPS_Data> GetGLPS_Datas(GL_Posting model)
    {
        if (model != null)
        {
            glps_datas = glPostingService.GetGLPS_Datas(model.PostingsId);
            return glps_datas;
        }
        else
        {
            glps_datas = new List<GLPS_Data>();
            return new List<GLPS_Data>();
        }
    }


    // filter
    private SourceEnum sourceValue { get; set; } = SourceEnum.NONE;
    public enum SourceEnum { NONE, PJ, AB, CD, EF, JH }
    DateTime? fromTRDate = DateTime.Today;
    DateTime? toTRDate = DateTime.Today;
    private void DoFilter(string sourceValue)
    {
        // reset for 2nd and 3rd tables
        // that depends on 1st table gl_postings
        Reset();

        GL_Postings_Filter_Data filterData = new GL_Postings_Filter_Data();
        filterData.Source = sourceValue;
        filterData.FromTRDate = fromTRDate;
        filterData.ToTRDate = toTRDate;


        if (sourceValue != "" && sourceValue != null)
            gl_postings = glPostingService.GetFilterGL_Postings(filterData);
        else
            gl_postings = glPostingService.GetAllGL_Postings();
    }


    // this will reset when filter is active
    private void Reset()
    {
        glps_datas = new List<GLPS_Data>();
        transactionSummary = new List<TransactionSummary>();
        selectedGL_Postings = new HashSet<GL_Posting>();
        selectedGL_Posting = new GL_Posting();
        selectedIds = new HashSet<int>();
    }
}

